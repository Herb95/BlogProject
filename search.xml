<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[List]]></title>
    <url>%2Fposts%2Fe4fa5726%2F</url>
    <content type="text"><![CDATA[List 集合之基本使用泛型泛型是C#2.0中的新增元素(C++中称为模板),主要用于解决一系列类似的问题.这种机制允许将类名左为参数传递给泛型类型,并生成相应的对象.将泛型(类,接口,方法,委托等)看做模板可能更好解释,模板中的变体部分将被作为参数传进来的类名所代替,从而得到一个新的类型定义.如何创建利用System.Collections.Generic命名空间下面的List泛型类创建集合.语法:ListListOfT = new List();ArrayList动态数组(ArrayList)代表可被单独索引的对象的有序集合.基本可以替代数组,与数组不同的是,在使用索引在指定的位置添加和移除项目,动态数组自动重新调整他的大小.它也允许在列表中进行冬天内存分配、增加、搜索、排序各项。常用属性:Capacity 获取或设置ArrayList可以包含的元素个数Count 获取ArrayList中实际包含的元素个数IsFixedSize 获取一个值,表示ArrayList是否具有固定大小IsReadOnly 获取一个值,表示ArrayList是否只读item 获取或设置指定索引处的元素常用方法:public virtual int Add(object value); 在 ArrayList 的末尾添加一个对象.public virtual void AddRange(ICollection c); 在 ArrayList 的末尾添加ICollection的元素.public virtual void Clear(); 从 ArrayList 中移除所有的元素.public virtual bool Contains(object item); 判断某个元素是否在 ArrayList 中.public virtual ArrayList GetRange(int index,int count); 返回一个 ArrayList,表示源ArrayList中元素的子集.public virtual int IndexOf(object); 返回某个值在 ArrayList 中第一次出现的索引,索引从零开始.public virtual void Insert(int index,objcet value); 在 ArrayList的指定索引处,插入一个元素.public virtual void InsertRange(int index,ICollection c); 在 ArrayList的指定索引出,插入某个集合的元素public virtual void Remove(object obj); 在 ArrayList 中移除第一次出现的指定对象.public virtual void RemoveAt(int index); 移除 ArrayList 的指定索引出的元素.public virtual void RemoveRange(int index,int count); 从 ArrayList 中移除某个范围的元素.public virtual void Reverse(); 逆转 ArrayList 中元素的顺序.public virtual void SetRange(int index,ICollection c); 复制某个集合的元素到 ArrayList 中某个范围的元素上.public virtual void Sort(); 对 ArrayList 中的元素进行排序.public virtual void TrimToSize(); 设置容量为 ArrayList 中的实际个数.List介绍List是一个C#内置的一个类,是类我们就可以实例化对象List本质和数组是一样的,因为List这个类的内部其实维护了一个数组List比数组灵活,这个类封装了很多方便我们操作这个内部数组的各种方法,可以方便对数组进行增加、删除、修改等操作，且List的长度可以动态改变,实例化中List类对象时,不需要指定长度.List基本使用创建泛型集合引入命名空间: using System.Collections.Generic;List&lt;类型&gt; 集合名 = new List&lt;类型&gt;();常用属性Capacity 用于获取或设置List可容纳元素的数量.当数量超过容量时,这个值会自动增长.可以设置这个值以减少容量,也可以调用trin()方法减少容量已适合实际的元素数目Count 获取数组当前元素数量常用方法list.Add(Value); 添加数据到集合中list[索引] 取出指定索引位置的数据 索引和数组一样从0开始list.Count 获取集合长度list.RemoveAt(索引) 删除指定索引位置的数据. 删除后,后面的数据索引自动调整list[索引] = 新值; 给指定索引的数据重新赋值list.item(); 通过制定索引获取或设置元素,对于list类来说,他是一个索引器.list.AddRange(); 公有方法,在list尾部添加实现了IConllection接口的多个元素list.BinarySearch(); 重载公有方法,用于排序的list内使用二分查找来定位指定元素list.Clear(); 移除所有元素list.Contains() 测试是否存在List内list.CopyTo() 重载公有方法,把一个list拷贝到一堆数组内list.Exists() 测试一个元素是否在List内list.Find() 查找并返回List内的出现第一个匹配元素list.FindAll() 查找并返回List内的所有匹配元素list.GetEnumerator() 重载的公有方法,返回一个用于迭代List的枚举器list.Getrange*() 拷贝指定范围的元素到新的list内list.IndexOf() 重载的公有方法,查找并返回每一个匹配元素的索引list.Insert() 在List内插入一个元素list.InsertRange() 在list中插入一组元素list.LastIndexOf() 重载的公有方法,查找并返回最后一个匹配元素的索引list.Remove() 移除与指定元素的第一个匹配list.RemoveRange() 移除指定范围的元素list.Reverse() 反转list内元素的顺序list.Sort() 对list内的元素进行排序list.ToArray() 把list内的元素拷贝到一个新的数组内list.trimToSize() 将容量设置为List中元素的实际数目Dictionary&lt;K,V&gt; 介绍Dictionary集合是一种键值对集合.该集合每个数据都是两个部分组成,键和值,在键值集合中,根据键找值键值集合中,键必须是唯一的,值是可以是重复的.List泛型集合,只是限定数据T的类型,在Dictionary&lt;K,V&gt;泛型集合中,分别对键(K)和值(V)的类型Dictionary&lt;K,V&gt; 基本方法创建Dictionary 需要引用命名空间 using System.Collection.Generic;Dictionary&lt;K类型,V类型&gt; 集合名 = new Dictionary&lt;K类型,V类型&gt;();常用属性dir.Add(K,V); 添加数据dir[K] 取出对应键名所对应的数据dir.Count 获取集合的长度dir.Remove(K); 删除指定键名所对应的数据dir[K] = (new V); 给指定键名所对应的数据重新赋值常用方法ContainsKey(K) 判断当前字典集合中对否包含某个键ContainsValue(V) 判断当前字典集合中是否包含某个值遍历集合1234foreach(var item in dic.Keys)&#123; Console.WriteLie(&quot;&#123;0&#125;:&#123;1&#125;&quot;,item,dic[itme]);&#125;]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构]]></title>
    <url>%2Fposts%2Fba907200%2F</url>
    <content type="text"><![CDATA[什么是数据结构1.在计算机科学中,数据结构(data structure)是计算机中存储、组织数据的方式.2.大多数数据结构是由数列、记录、可辨识联合、引用等基本类型构成。3.数据结构可透过编程语言所提供的数据类型、引用及其他操作加以实现。一个设计良好的数据结构，应该在尽可能使用较少的时间和空间资源前提下，支持各种程序运行。4.正确的数据机构可提高算法的效率5.系统架构的关键因素是数据机构而非算法的见解,导致多种形式化的设计方法与编程语言的出现.绝大多数的语言都带上某种模块化思想,透过将数据机构的具体实现封装隐藏于用户界面之后的方法,来让不同的应用程序嫩够安全的重用这些结构常见的数据结构数组 (Array)堆栈 (Stack)队列 (Queue)链表 (Linked List)树 (Tree)图 (Graph)堆 (Heap)散列表 (Hash)参考维基百科地址 &lt;–点击]]></content>
      <tags>
        <tag>数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lua初识]]></title>
    <url>%2Fposts%2Fundefined%2F</url>
    <content type="text"><![CDATA[Lua初识Lua 数据类型8种基本类型:nil :表示无效值(条件表达式代表false)boolean:布尔 包含两个值:true和falsenumber: 表示双精度类型的实浮点数string: 字符串有””或者’’表示userdata: 任意存储中的C数据结构function: Lua或C编写的函数thread: 执行独立线路,执行协同程序table: 关联数据(associative arrays),索引是数字或者字符串,table的创建通过”构造表达式”来完成,最简单构造表达式{}(创建一个空表)nil1234nil:空 print(type(x)==&quot;nil&quot;) true print(typeI(x)==nil) false 注: type(X)==nil 结果为 false 的原因是因为 type(type(X))==stringnumber1234567number类型--双精度类型(默认类型修改luaconf.h文中定义)例如:print(type(2))print(type(2.2))print(type(0.2))print(type(2e+1))print(type(2.1231231465e-06))string1234567891011用 [[]] 表示一块字符串例如:html = [[ &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;a href=&quot;https://herb95.github.io/&quot;&gt;Graywolf 博客&lt;/a&gt; &lt;/body&gt; &lt;/html&gt;]]print(html)运算123456789101112数字,字符串上进行运算print(&quot;3&quot;+9)print(&quot;3&quot;+&quot;9&quot;)print(&quot;3+9&quot;)print(&quot;-2e2&quot;*9)print(&quot;e&quot;+2)结果:12123+9-1800error...注:字符串连接使用是 ..注:用#来计算字符串的长度# 运用123456len=&quot;herb95.github.io/&quot;print(#len)print(#&quot;herb95.github.io/&quot;)结果:1717table1234567891011tab1 =&#123;&#125;-- 直接初始化tab2 =&#123;&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;&#125;for k,v in pairs(tab2) do print(k.. &quot;:&quot; .. v)end结果:1:12:23:34:4注:lua表默认初始索引一般以1开始table不会固定长度大小,有新数据添加table长度会自动增长,没初始的table都是nilfunction1234567891011-- function 函数是被看做事&quot;第一类值(First-Class Value),可存变量&quot;:例如:function add(a,b) return a+bendprint(add(10,20))add2 = addprint(add(10,30))结果:3040function 可以做匿名函数(anonymous function)的方式参数传递:123456789101112131415function testFun(tab,fun) for k,v in pairs(tab) do print(fun(k,v)) endendtab1 = &#123;k1= &quot;1&quot;,k2 = &quot;3&quot;&#125;;testFun(tab1,function(k,v) return k..&quot;=&quot;..vend)结果:k1=1k2=3thread线程lua中最主要的线程是协同程序(coroutine),跟线程(thread)差不多,拥有自己独立的栈、 局部变量和指令指针，可与其他协同程序共享全局变量线程和协程的区别：线程可以多个运行；协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起(suspend)时才会暂停userdata (自定义类型)是一种用户自定义数据,表示一种有应用程序或C/C++语言库创建类型,将任意C/C++任意数据类型的数据(通常是struct和指针) 存到lua变量中调用]]></content>
      <tags>
        <tag>Lua Study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署个人博客方法]]></title>
    <url>%2Fposts%2F4441%2F</url>
    <content type="text"><![CDATA[部署个人博客命令npm+hexonpm install hexo-cli -g #安装Hexonpm install hexo-deployer-git –save #部署hexo到git page的deployerhexo init #初始化hexo generate #简化 hexo g 生成hexo server #简化 hexo s 启动服务器配置githubcd ~/.ssh #查看本机是否存在SSH Key###存在clip &lt;~/.ssh/id_rsa.pub #复制公钥到 clipboard登录github 设置秘钥ssh -T git@github.com #测试秘钥不存在ssh-keygen -t rsa -C “your_email@example.com“弹出界面直接回车:默认文件进行存储输入特定的文件名输入密码(可不输入直接回车)确认密码执行存在那一步创建库选择设置的SSH 并复制打开本地hexo项目 编辑 _config.yml修改1234deploy:type: git repo: &quot;复制的SSH&quot;branch: master在Hexo 文件下执行hexo g -d报错 not fount:git重新安装npm install hexo-deployer-git –save再次执行 hexo g -d浏览器输入github生成的外链 https://xxxx.github.io/美化自己博客主题下载网址:https://hexo.io克隆主题到theme目录修改配置文件 _config.yml12345678910111213141516171819202122232425262728 theme: hexo-theme-chan``` 返回项目根目录 执行语句- hexo g- hexo s- http://localhost:4000/### 部署到Github- hexo clean #清除缓存- hexo g -d### Hexo编写文章1.发表新篇- hexo n &quot;NewPage&quot;- 生成地址在 \项目\Hexo\source_post\NewPage.md- 推送服务器上- hexo g- hexo d - 注: 合并命令 hexo d -g### 域名关联- hexo\source\ 创建 CNAME 内容是你的域名- 提交 hexo g -d- 修改 DNS``` DNSf1g1ns2.dnspod.net f1g1ns1.dnspod.net域名解析打开https://www.dnspod.cn/ 注册账户添加域名添加记录1.主记录为@2.www记录值相同 博客主页对应ip获取ip ping “github博客地址”等生效]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F16107%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment]]></content>
  </entry>
</search>
